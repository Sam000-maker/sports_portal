# Generated by Django 5.1.11 on 2025-09-20 10:49

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('facilities', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PositionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='position_groups', to='accounts.sport')),
            ],
            options={
                'ordering': ['sport_id', 'order', 'name'],
                'unique_together': {('sport', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('code', models.CharField(help_text='Short code: e.g., GK, DF, BAT', max_length=16)),
                ('min_per_lineup', models.PositiveSmallIntegerField(default=0)),
                ('max_per_lineup', models.PositiveSmallIntegerField(default=11)),
                ('is_unique', models.BooleanField(default=False, help_text='If true, allow at most 1 in a lineup (e.g., GK, WK)')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='accounts.sport')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='positions', to='players.positiongroup')),
            ],
            options={
                'ordering': ['sport_id', 'group_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('captain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams_captained', to=settings.AUTH_USER_MODEL)),
                ('coach', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams_coached', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_created', to=settings.AUTH_USER_MODEL)),
                ('home_venues', models.ManyToManyField(blank=True, help_text='Preferred home grounds/courts', related_name='home_teams', to='facilities.venue')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='accounts.sport')),
            ],
            options={
                'ordering': ['sport_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TeamMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('coach', 'Coach'), ('captain', 'Captain'), ('player', 'Player'), ('manager', 'Manager')], default='player', max_length=16)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('suspended', 'Suspended')], default='pending', max_length=16)),
                ('jersey_no', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('primary_position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_members', to='players.position')),
                ('secondary_position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secondary_members', to='players.position')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='players.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['team_id', 'user_id'],
            },
        ),
        migrations.AddField(
            model_name='team',
            name='members',
            field=models.ManyToManyField(related_name='teams', through='players.TeamMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Formation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('counts_by_code', models.JSONField(default=dict, help_text='Map of position code -> count')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations', to='accounts.sport')),
            ],
            options={
                'ordering': ['sport_id', 'name'],
                'unique_together': {('sport', 'name')},
            },
        ),
        migrations.AddConstraint(
            model_name='position',
            constraint=models.UniqueConstraint(fields=('sport', 'code'), name='unique_position_code_per_sport'),
        ),
        migrations.AddConstraint(
            model_name='teammembership',
            constraint=models.UniqueConstraint(fields=('team', 'user'), name='unique_user_per_team'),
        ),
        migrations.AddConstraint(
            model_name='teammembership',
            constraint=models.UniqueConstraint(condition=models.Q(('jersey_no__isnull', False)), fields=('team', 'jersey_no'), name='unique_jersey_per_team'),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('sport', 'name')},
        ),
    ]
